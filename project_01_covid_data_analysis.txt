-- Covid 19 Data Exploration 
-- Skills used: Aggregate Functions, Creating Views, Joins, Converting Data Types
-- Platform - BigQuery

SELECT *
FROM `covid_dataset.covid_deaths`
WHERE continent IS NOT NULL
ORDER BY 3,4;

-- Select Data that we are going to be starting with

SELECT location, date, total_cases, new_cases, total_deaths, population
FROM `covid_dataset.covid_deaths`
WHERE continent IS NOT NULL 
ORDER BY 1,2;

-- Total Cases vs Total Deaths
-- Shows likelihood of dying if you contract covid in your country

SELECT location, date, total_cases,total_deaths, (total_deaths/total_cases)*100 AS death_percentage
FROM `covid_dataset.covid_deaths`
WHERE location LIKE '%states%'
AND continent IS NOT NULL 
ORDER BY 1,2;

-- Total Cases vs Population
-- Shows what percentage of population infected with Covid

SELECT location, date, population, total_cases,  (total_cases/population)*100 AS percent_population_infected
FROM `covid_dataset.covid_deaths`
ORDER BY 1,2;

-- Countries with Highest Infection Rate compared to Population

SELECT location, population, MAX(total_cases) AS highest_infection_count,  MAX((total_cases/population))*100 AS percent_population_infected
FROM `covid_dataset.covid_deaths`
GROUP BY location, population
ORDER BY percent_population_infected DESC;

-- Countries with Highest Death Count

SELECT location, MAX(CAST(total_deaths AS INT64)) AS total_death_count
FROM `covid_dataset.covid_deaths`
WHERE continent IS NOT NULL 
GROUP BY location
ORDER BY total_death_count DESC;

-- BREAKING THINGS DOWN BY CONTINENT

-- Showing contintents with the highest death count per population

SELECT continent, MAX(CAST(Total_deaths AS INT64)) AS total_death_count
FROM `covid_dataset.covid_deaths`
WHERE continent IS NOT NULL 
GROUP BY continent
ORDER BY total_death_count DESC;

-- GLOBAL NUMBERS

SELECT SUM(new_cases) AS total_cases, SUM(CAST(new_deaths AS INT64)) AS total_deaths, SUM(CAST(new_deaths AS int))/SUM(new_cases)*100 AS death_percentage
FROM `covid_dataset.covid_deaths`
WHERE continent IS NOT NULL 
ORDER BY 1,2;

-- Total Population vs Vaccinations
-- Shows Percentage of Population that has recieved at least one Covid Vaccine

SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations
, SUM(CAST(vac.new_vaccinations AS INT64)) OVER (PARTITION BY dea.location ORDER BY dea.location, dea.date) AS rolling_people_vaccinated
FROM `covid_dataset.covid_deaths` dea
JOIN `covid_dataset.covid_vaccincations` vac
	ON dea.location = vac.location
	AND dea.date = vac.date
WHERE dea.continent IS NOT NULL
ORDER BY 2,3;

-- Using CTE to perform calculation on partition by in previous query

WITH pop_vs_vac AS
(
SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations
, SUM(CAST(vac.new_vaccinations AS INT64)) OVER (PARTITION BY dea.location ORDER BY dea.location, dea.date) AS rolling_people_vaccinated
FROM `covid_dataset.covid_deaths` dea
JOIN `covid_dataset.covid_vaccincations` vac
	ON dea.location = vac.location
	AND dea.date = vac.date
WHERE dea.continent IS NOT NULL
-- ORDER BY 2,3
)
SELECT *, (rolling_people_vaccinated/population)*100 AS perc_people_vaccinated
FROM pop_vs_vac;

-- Using Temp Table to perform Calculation on Partition By in previous query

--DROP TABLE IF EXISTS `covid_dataset.percent_population_vaccinated`;
CREATE TABLE `covid_dataset.percent_population_vaccinated`
(
continent STRING,
location STRING,
date DATETIME,
population INT,
new_vaccinations INT,
rolling_people_vaccinated INT
);

--Following query doesnot run on a free version of BigQuery
INSERT INTO `covid_dataset.percent_population_vaccinated`
SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations
, SUM(CAST(vac.new_vaccinations AS INT64)) OVER (PARTITION BY dea.Location ORDER BY dea.location, dea.date) AS RollingPeopleVaccinated
FROM `covid_dataset.covid_deaths` dea
JOIN `covid_dataset.covid_vaccincations` vac
	ON dea.location = vac.location
	AND dea.date = vac.date;


SELECT *, (rolling_people_vaccinated/population)*100 AS perc_people_vaccinated
FROM `covid_dataset.percent_population_vaccinated`;

-- Creating View to store data for later visualizations

CREATE VIEW `covid_dataset.percent_population_vaccinated` AS
SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations
, SUM(CAST(vac.new_vaccinations AS INT64)) OVER (PARTITION BY dea.Location ORDER BY dea.location, dea.date) AS RollingPeopleVaccinated
--, (RollingPeopleVaccinated/population)*100
FROM `covid_dataset.covid_deaths` dea
JOIN `covid_dataset.covid_vaccincations` vac
	ON dea.location = vac.location
	AND dea.date = vac.date
WHERE dea.continent IS NOT NULL;
